#!/bin/sh

#
# yaf start/control script
#
# Uses airdaemon and yaf to run YAF for live collection, robust to remote 
# collector failure. Not suitable for running YAF on pcap files, or for
# running YAF for live capture and writing to rotated IPFIX files.
#
# chkconfig: - 19 96
# description:  Control yaf as a live capture daemon
#

RETVAL=0

MYNAME="yaf"

# autoconf stuff
prefix=@prefix@

# yaf.conf must be located in the SCRIPT_CONFIG_LOCATION directory to work.
# Edit this line or set the SCRIPT_CONFIG_LOCATION environment variable if
# yaf.conf is not located in the default location.
if [ "x$SCRIPT_CONFIG_LOCATION" = "x" ] ; then
    SCRIPT_CONFIG_LOCATION=@sysconfdir@
fi

if [ "x$YAF_STATEDIR" = "x" ] ; then
    YAF_STATEDIR=@localstatedir@
fi

# Determine whether our name has an addendum
BASENAME='s:\(.*/\)*\([^/]*\)$:\2:'
SEDEXT1='s/\(.*\)\.init\.d$/\1/'
SEDEXT2='s/\(.*\)\.sh$/\1/'
SCRIPTNAME=`echo $0 | sed ${BASENAME} | sed ${SEDEXT1} | sed ${SEDEXT2}`
PRETEST="\\(${MYNAME}\\)\\(-.*\\)*\$"
SUFTEST="${MYNAME}\\(-.*\\)\$"
PREFIX=`expr "x${SCRIPTNAME}" : "x${PRETEST}"`
SUFFIX=`expr "x${SCRIPTNAME}" : "x${SUFTEST}"`

if [ "x$PREFIX" != "x$MYNAME" ] ; then
    SUFFIX=
fi

SCRIPT_CONFIG=${SCRIPT_CONFIG_LOCATION}/${MYNAME}${SUFFIX}.conf


# set the loadable library path to pick up both default plugin
# libraries and the application labeler libraries
export LTDL_LIBRARY_PATH=$prefix/lib:$LTDL_LIBRARY_PATH


############################################################################

#
# This script requires the following configuration variables from the
# yaf.conf file:
#
# ENABLED           must be non-empty to start YAF
# YAF_USER          user to become after opening capture device (optional)
# YAF_CAP_TYPE      capture driver (pcap or dag)
# YAF_CAP_IF        capture interface name
# YAF_IPFIX_PROTO   collector transport protocol
# YAF_IPFIX_HOST    collector hostname
# YAF_IPFIX_PORT    collector port (optional; default 4739)
# YAF_LOG           log file or syslog facility name (optional)
# YAF_EXTRAFLAGS    Additional YAF command-line flags (optional)
# YAF_PIDFILE       pidfile path (passed to airdaemon) (optional)
# YAF_DAEMON_LOG    airdaemon logfile or syslog facility name (optional)
# YAF_RETRY     minumum retry delay on YAF failure (optional)
# YAF_RETRY_MAX     maximum retry delay on YAF failure (optional)
#

# grab configuration and check enabled state

if [ ! -f "${SCRIPT_CONFIG}" ] ; then
    echo "$0: ${SCRIPT_CONFIG} does not exist."
    exit 0
fi

. "${SCRIPT_CONFIG}"

if [ "x$ENABLED" = "x" ] ; then
    exit 0
fi

# verify we have a runnable YAF and airdaemon

check_executable()
{
    if [ ! -x $1 ] ; then
        echo "$0: $1 is not executable or not found."
        exit 1
    fi
}

YAFBIN=${prefix}/bin/yaf
AIRDAEMONBIN=${prefix}/bin/airdaemon

check_executable ${YAFBIN}
check_executable ${AIRDAEMONBIN}

# verify we have a good configuration

check_varempty()
{
    if [ "x$2" = "x" ] ; then
        echo "$0: the $1 parameter in ${SCRIPT_CONFIG} is not set."
        exit 1
    fi
}

check_varempty  "YAF_CAP_TYPE"      ${YAF_CAP_TYPE}
check_varempty  "YAF_CAP_IF"        ${YAF_CAP_IF}
check_varempty  "YAF_IPFIX_PROTO"   ${YAF_IPFIX_PROTO}
check_varempty  "YAF_IPFIX_HOST"    ${YAF_IPFIX_HOST}

# build the argument lists

YAFARGS=""

if [ "x$YAF_USER" != "x" ]; then
    YAFARGS="$YAFARGS --become-user $YAF_USER"
fi

YAFARGS="$YAFARGS --live $YAF_CAP_TYPE --in $YAF_CAP_IF"
YAFARGS="$YAFARGS --ipfix $YAF_IPFIX_PROTO --out $YAF_IPFIX_HOST"

if [ "x$YAF_IPFIX_PORT" != "x" ]; then
    YAFARGS="$YAFARGS --ipfix-port $YAF_IPFIX_PORT"
fi

if [ "x$YAF_LOG" = "x" ]; then
    YAF_LOG="$YAF_STATEDIR/yaf.log"
fi
YAFARGS="$YAFARGS --log $YAF_LOG --verbose"

YAFARGS="$YAFARGS $YAF_EXTRAFLAGS"

AIRDAEMONARGS=""

if [ "x$YAF_PIDFILE" = "x" ]; then
    YAF_PIDFILE="$YAF_STATEDIR/yaf.pid"
fi
AIRDAEMONARGS="$AIRDAEMONARGS --pidfile $YAF_PIDFILE"

if [ "x$YAF_DAEMON_LOG" = "x" ]; then
    YAF_DAEMON_LOG="$YAF_STATEDIR/airdaemon-yaf.log"
fi
AIRDAEMONARGS="$AIRDAEMONARGS --log $YAF_DAEMON_LOG --verbose"

if [ "x$YAF_RETRY" = "x" ]; then
    YAF_RETRY="5"
fi
AIRDAEMONARGS="$AIRDAEMONARGS --retry $YAF_RETRY"

if [ "x$YAF_RETRY_MAX" = "x" ]; then
    YAF_RETRY_MAX="300"
fi
AIRDAEMONARGS="$AIRDAEMONARGS --retry-max $YAF_RETRY_MAX"

checkpid() {
    kill -0 $1 >/dev/null 2>&1 && return 0
    return 1
}

getPid() {
    RETVAL=1
    if [ -f $YAF_PIDFILE ] ; then
        RETVAL=2
        read pid < ${YAF_PIDFILE}
        if [ "X$pid" != "X" ] ; then
            RETVAL=3
            # Found a pid
            if checkpid $pid ; then
                echo $pid
                RETVAL=0
            fi
        fi
    fi
    echo ""
    return $RETVAL
}

start() {
    /bin/echo -n "Starting ${MYNAME}:	"
    /bin/rm -f ${YAF_PIDFILE} 2> /dev/null

    $AIRDAEMONBIN $AIRDAEMONARGS -- $YAFBIN $YAFARGS
    RETVAL=$?
    if [ "$RETVAL" -ne "0" ] ; then
        echo "[Failed]"
    else
        sleep 1
        PID=`getPid`
        if [ "x$PID" = "x" ] ; then
            echo "[Failed]"
            RETVAL=1
        else
            echo '[OK]'
        fi
    fi
    return $RETVAL
}

stop() {
    PID=`getPid`
    if [ "X${PID}" = "X" ] ; then
        echo "${MYNAME} not running"
        return 1
    fi
    /bin/echo -n "Stopping ${MYNAME}:	"
    /bin/kill -s INT $PID
    sleep 1
    (checkpid $PID)
    RETVAL=$?
    [ "$RETVAL" -eq "1" ] && echo '[OK]' || echo '[Failed]'
    /bin/rm -f ${YAF_PIDFILE} 2> /dev/null
    return $RETVAL
}

restart() {
    stop
    start
}

status() {
    if [ $# -gt 0 ] ; then
        doEcho=0
    else
        doEcho=1
    fi

    # first check if the process is running
    PID=`getPid`
    RETVAL=$?

    if [ $doEcho -eq 1 ] ; then
        case "$RETVAL" in
          0)
            echo "${MYNAME} is running with pid $PID"
            ;;
          1)
            echo "${MYNAME} is stopped"
            ;;
          *)
            echo "${MYNAME} is dead but ${YAF_PIDFILE} exists"
            ;;
        esac
    fi
    return $RETVAL
}

dumpstats() {
    PID=`getPid`
    if [ "X${PID}" = "X" ] ; then
        echo "${MYNAME} not running"
        return 1
    fi
    /bin/kill -s USR1 $PID
    RETVAL=$?
    if [ "$RETVAL" -eq 0 ]; then
        echo "Dumped ${MYNAME} statistics to ${YAF_LOG}"
    else
        echo "Could not dump ${MYNAME} statistics"
    fi
    return $RETVAL
}

# See how we were called.
case "$1" in
    start)
	start
	RETVAL=$?
	;;
    stop)
	stop
	RETVAL=$?
	;;
    restart)
	restart
	RETVAL=$?
	;;
    status)
    status
	RETVAL=$?
    ;;
    dumpstats)
    dumpstats
	RETVAL=$?
    ;;
    *)
	echo $"Usage: $0 {start|stop|restart|status|dumpstats}"
	RETVAL=1
	;;
esac
exit $RETVAL

## ------------------------------------------------------------------------
## yaf
## YAF daemon startup script
## ------------------------------------------------------------------------
## Copyright (C) 2007-2011 Carnegie Mellon University. All Rights Reserved.
## ------------------------------------------------------------------------
## Authors: Brian Trammell
## ------------------------------------------------------------------------
## GNU General Public License (GPL) Rights pursuant to Version 2, June 1991
## Government Purpose License Rights (GPLR) pursuant to DFARS 252.227-7013
## ------------------------------------------------------------------------
